{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let WeatherServiceMapper = /*#__PURE__*/(() => {\n  class WeatherServiceMapper {\n    static parseCurrentWeather(current) {\n      if (!current) {\n        return;\n      }\n\n      const response = {\n        clouds: current.clouds,\n        feelsLike: current.feels_like,\n        humidity: current.humidity,\n        sunrise: current.sunrise,\n        sunset: current.sunset,\n        temp: current.temp,\n        uvi: current.uvi,\n        weather: current.weather,\n        windDeg: current.wind_deg,\n        windSpeed: current.wind_speed,\n        rain: this.parseRain(current.rain),\n        snow: this.parseSnow(current.snow)\n      };\n      return response;\n    }\n\n    static parseRain(source) {\n      if (!source) {\n        return;\n      }\n\n      const rain = {\n        lastOneHour: source['1h']\n      };\n      return rain;\n    }\n\n    static parseSnow(source) {\n      if (!source) {\n        return;\n      }\n\n      const snow = {\n        lastOneHour: source['1h']\n      };\n      return snow;\n    }\n\n    parseWeatherForecastResponse(source) {\n      if (!source) {\n        return;\n      }\n\n      const response = {\n        alerts: this.parseAlertWeather(source.alerts),\n        current: WeatherServiceMapper.parseCurrentWeather(source.current),\n        daily: this.parseDailyWeather(source.daily),\n        hourly: this.parseHourlyWeather(source.hourly)\n      };\n      return response;\n    }\n\n    parseDailyWeather(daily) {\n      const response = [];\n\n      if (!daily) {\n        return;\n      }\n\n      daily.forEach(el => {\n        const day = {\n          clouds: el.clouds,\n          feelsLike: el.feels_like,\n          humidity: el.humidity,\n          sunrise: el.sunrise,\n          sunset: el.sunset,\n          moonset: el.moonset,\n          moonrise: el.moonrise,\n          temp: el.temp,\n          uvi: el.uvi,\n          weather: el.weather,\n          windDeg: el.wind_deg,\n          windGust: el.wind_gust,\n          windSpeed: el.wind_speed,\n          rain: el.rain\n        };\n        response.push(day);\n      });\n      return response;\n    }\n\n    parseAlertWeather(alerts) {\n      const response = [];\n\n      if (!alerts) {\n        return;\n      }\n\n      alerts.forEach(el => {\n        const alert = {\n          end: el.end,\n          description: el.description,\n          event: el.event,\n          start: el.start\n        };\n        response.push(alert);\n      });\n      return response;\n    }\n\n    parseHourlyWeather(hourly) {\n      const response = [];\n      const slicedHourly = hourly.slice(0, 24);\n\n      if (!slicedHourly) {\n        return;\n      }\n\n      slicedHourly.forEach(el => {\n        const hour = {\n          clouds: el.clouds,\n          hour: new Date(+el.dt * 1000).getHours(),\n          feels_like: el.feels_like,\n          humidity: el.humidity,\n          temp: el.temp,\n          uvi: el.uvi,\n          weather: el.weather,\n          wind_deg: el.wind_deg,\n          wind_gust: el.wind_gust,\n          wind_speed: el.wind_speed,\n          rain: el.rain\n        };\n        response.push(hour);\n      });\n      return response;\n    }\n\n  }\n\n  WeatherServiceMapper.ɵfac = function WeatherServiceMapper_Factory(t) {\n    return new (t || WeatherServiceMapper)();\n  };\n\n  WeatherServiceMapper.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherServiceMapper,\n    factory: WeatherServiceMapper.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherServiceMapper;\n})();","map":null,"metadata":{},"sourceType":"module"}